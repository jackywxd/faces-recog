#!/usr/bin/env node

/**
 * 生成测试资源文件脚本
 * 创建所有Playwright测试所需的资源文件
 */

const fs = require("fs");
const path = require("path");

console.log("🎨 正在生成测试资源文件...");

// 创建最小的JPEG文件 (1x1像素)
const createMinimalJPEG = () => {
  // 最小的JPEG文件头和数据
  const jpegData = Buffer.from([
    0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
    0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
    0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
    0x09, 0x08, 0x0a, 0x0c, 0x14, 0x0d, 0x0c, 0x0b, 0x0b, 0x0c, 0x19, 0x12,
    0x13, 0x0f, 0x14, 0x1d, 0x1a, 0x1f, 0x1e, 0x1d, 0x1a, 0x1c, 0x1c, 0x20,
    0x24, 0x2e, 0x27, 0x20, 0x22, 0x2c, 0x23, 0x1c, 0x1c, 0x28, 0x37, 0x29,
    0x2c, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1f, 0x27, 0x39, 0x3d, 0x38, 0x32,
    0x3c, 0x2e, 0x33, 0x34, 0x32, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x00, 0x01,
    0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01,
    0xff, 0xc4, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xff, 0xc4,
    0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xda, 0x00, 0x0c,
    0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3f, 0x00, 0xb2, 0xff,
    0xd9,
  ]);
  return jpegData;
};

// 创建最小的PNG文件 (1x1像素)
const createMinimalPNG = () => {
  const pngData = Buffer.from([
    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
    0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
    0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x77, 0x53, 0xde, 0x00, 0x00, 0x00,
    0x0c, 0x49, 0x44, 0x41, 0x54, 0x08, 0xd7, 0x63, 0xf8, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x01, 0x5c, 0xc2, 0x8b, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x49,
    0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
  ]);
  return pngData;
};

// 创建更大的JPEG文件 (用于大文件测试)
const createLargeJPEG = () => {
  const baseJpeg = createMinimalJPEG();
  // 创建一个更大的缓冲区 (约500KB)
  const largeBuffer = Buffer.alloc(500 * 1024);
  baseJpeg.copy(largeBuffer, 0);
  // 填充一些随机数据
  for (let i = baseJpeg.length; i < largeBuffer.length - 2; i++) {
    largeBuffer[i] = Math.floor(Math.random() * 256);
  }
  // 确保以JPEG结束标记结束
  largeBuffer[largeBuffer.length - 2] = 0xff;
  largeBuffer[largeBuffer.length - 1] = 0xd9;
  return largeBuffer;
};

// 文件列表和生成函数
const filesToCreate = [
  // 有效图片文件
  { name: "sample-face.jpg", generator: createMinimalJPEG },
  { name: "sample-face.png", generator: createMinimalPNG },
  { name: "portrait.jpg", generator: createMinimalJPEG },
  { name: "landscape.jpg", generator: createMinimalJPEG },
  { name: "group-photo.jpg", generator: createMinimalJPEG },
  { name: "tiny-image.jpg", generator: createMinimalJPEG },
  { name: "blurry-face.jpg", generator: createMinimalJPEG },
  { name: "profile-face.jpg", generator: createMinimalJPEG },

  // 大文件测试
  { name: "large-image.jpg", generator: createLargeJPEG },

  // WebP文件 (简单的WebP文件头)
  {
    name: "sample-face.webp",
    generator: () =>
      Buffer.from([
        0x52, 0x49, 0x46, 0x46, 0x1a, 0x00, 0x00, 0x00, 0x57, 0x45, 0x42, 0x50,
        0x56, 0x50, 0x38, 0x20, 0x0e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3f, 0x01, 0x00, 0x00,
      ]),
  },

  // 无效格式文件
  {
    name: "invalid-file.txt",
    generator: () =>
      Buffer.from("这是一个无效的图片文件\n用于测试文件格式验证\n"),
  },
  {
    name: "document.pdf",
    generator: () =>
      Buffer.from([
        0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x34, 0x0a, 0x25, 0xe2, 0xe3,
        0xcf, 0xd3, 0x0a, 0x31, 0x20, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0a, 0x3c,
        0x3c, 0x0a, 0x2f, 0x54, 0x79, 0x70, 0x65, 0x20, 0x2f, 0x43, 0x61, 0x74,
        0x61, 0x6c, 0x6f, 0x67, 0x0a, 0x2f, 0x50, 0x61, 0x67, 0x65, 0x73, 0x20,
        0x32, 0x20, 0x30, 0x20, 0x52, 0x0a, 0x3e, 0x3e, 0x0a, 0x65, 0x6e, 0x64,
        0x6f, 0x62, 0x6a, 0x0a,
      ]),
  },
];

// 创建所有文件
let created = 0;
let errors = 0;

filesToCreate.forEach(({ name, generator }) => {
  try {
    const data = generator();
    fs.writeFileSync(path.join(__dirname, name), data);
    console.log(`✅ 创建: ${name} (${data.length} bytes)`);
    created++;
  } catch (error) {
    console.error(`❌ 创建失败: ${name} - ${error.message}`);
    errors++;
  }
});

console.log(`\n📊 创建摘要:`);
console.log(`✅ 成功创建: ${created} 个文件`);
console.log(`❌ 创建失败: ${errors} 个文件`);

if (created > 0) {
  console.log(`\n🎉 测试资源文件创建完成！`);
  console.log(`📁 位置: tests/assets/`);
  console.log(`🧪 现在可以运行测试: npm run test:check`);
} else {
  console.error(`\n💥 没有成功创建任何文件，请检查错误信息`);
  process.exit(1);
}
