name: Playwright 自动化测试

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    strategy:
      matrix:
        # 测试多个浏览器
        browser: [chromium, firefox, webkit]
        # 测试多个环境
        environment: [local, staging]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: 安装依赖
        run: |
          pnpm install --frozen-lockfile
          echo "依赖安装完成，检查lockfile状态..."
          pnpm list --depth=0

      - name: 安装 Playwright 浏览器
        run: npx playwright install --with-deps

      - name: 构建项目
        run: pnpm run build

      - name: 类型检查
        run: pnpm run type-check

      - name: 代码检查 (非阻塞)
        run: pnpm run lint || true
        continue-on-error: true

      - name: 启动测试服务器
        if: matrix.environment == 'local'
        run: |
          # 启动前端开发服务器
          pnpm run dev:web > web.log 2>&1 &
          echo "WEB_SERVER_PID=$!" >> $GITHUB_ENV

          # 启动API服务器
          pnpm run dev:api > api.log 2>&1 &
          echo "API_SERVER_PID=$!" >> $GITHUB_ENV
        env:
          NODE_ENV: test

      - name: 等待服务启动
        if: matrix.environment == 'local'
        run: |
          echo "等待前端服务启动..."
          npx wait-on http://localhost:3000 --timeout 180000 --interval 2000
          echo "前端服务已启动"

          echo "等待API服务启动..."
          npx wait-on http://localhost:8787 --timeout 180000 --interval 2000
          echo "API服务已启动"

          # 额外等待确保服务完全就绪
          sleep 10

          # 验证服务健康状态
          curl -f http://localhost:3000/ || echo "前端服务健康检查失败"
          curl -f http://localhost:8787/health || echo "API服务健康检查失败"

      - name: 设置环境变量
        run: |
          if [ "${{ matrix.environment }}" = "local" ]; then
            echo "TEST_BASE_URL=http://localhost:3000" >> $GITHUB_ENV
            echo "API_BASE_URL=http://localhost:8787" >> $GITHUB_ENV
          else
            echo "TEST_BASE_URL=https://251f1a66.face-recog-web-staging.pages.dev" >> $GITHUB_ENV
            echo "API_BASE_URL=https://face-recog-api-staging.small-tooth-cc10.workers.dev" >> $GITHUB_ENV
          fi
          echo "TEST_ENV=${{ matrix.environment }}" >> $GITHUB_ENV
          echo "TEST_SESSION_ID=${{ github.run_id }}-${{ matrix.browser }}-${{ matrix.environment }}" >> $GITHUB_ENV

      - name: 运行 Playwright 测试
        run: |
          echo "开始运行 Playwright 测试..."
          echo "浏览器: ${{ matrix.browser }}"
          echo "环境: ${{ matrix.environment }}"
          echo "测试URL: ${{ env.TEST_BASE_URL }}"
          echo "API URL: ${{ env.API_BASE_URL }}"

          npx playwright test --project=${{ matrix.browser }} --reporter=line

          echo "Playwright 测试完成"
        env:
          CI: true
          TEST_ENV: ${{ env.TEST_ENV }}
          TEST_BASE_URL: ${{ env.TEST_BASE_URL }}
          API_BASE_URL: ${{ env.API_BASE_URL }}
          TEST_SESSION_ID: ${{ env.TEST_SESSION_ID }}

      - name: 停止本地服务器
        if: matrix.environment == 'local'
        run: |
          if [ ! -z "$WEB_SERVER_PID" ]; then
            kill $WEB_SERVER_PID || true
          fi
          if [ ! -z "$API_SERVER_PID" ]; then
            kill $API_SERVER_PID || true
          fi

      - name: 上传测试报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}-${{ matrix.environment }}
          path: |
            playwright-report/
            test-results/
          retention-days: 30

      - name: 上传服务日志
        if: matrix.environment == 'local' && always()
        uses: actions/upload-artifact@v4
        with:
          name: server-logs-${{ matrix.browser }}-${{ matrix.environment }}
          path: |
            web.log
            api.log
          retention-days: 7

      - name: 上传截图
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots-${{ matrix.browser }}-${{ matrix.environment }}
          path: test-results/
          retention-days: 7

  # 性能和负载测试作业
  performance-test:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: 安装依赖
        run: |
          pnpm install --frozen-lockfile
          echo "依赖安装完成，检查lockfile状态..."
          pnpm list --depth=0

      - name: 安装 Playwright 浏览器
        run: npx playwright install --with-deps

      - name: 运行性能测试
        run: npx playwright test --project=chromium --reporter=line
        env:
          TEST_ENV: staging
          TEST_BASE_URL: https://251f1a66.face-recog-web-staging.pages.dev
          API_BASE_URL: https://face-recog-api-staging.small-tooth-cc10.workers.dev

      - name: 生成性能报告
        run: |
          echo "## 🚀 性能测试结果" >> $GITHUB_STEP_SUMMARY
          echo "测试环境: staging" >> $GITHUB_STEP_SUMMARY
          echo "浏览器: Chromium" >> $GITHUB_STEP_SUMMARY

          if [ -f "test-results/performance-metrics.json" ]; then
            echo "### 关键指标" >> $GITHUB_STEP_SUMMARY
            cat test-results/performance-metrics.json >> $GITHUB_STEP_SUMMARY
          fi

  # 测试结果汇总
  test-summary:
    runs-on: ubuntu-latest
    needs: [test, performance-test]
    if: always()

    steps:
      - name: 下载所有测试报告
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          path: all-reports/

      - name: 生成测试摘要
        run: |
          echo "## 🧪 测试执行摘要" >> $GITHUB_STEP_SUMMARY
          echo "### 环境矩阵测试结果" >> $GITHUB_STEP_SUMMARY

          total_tests=0
          passed_tests=0
          failed_tests=0

          for report_dir in all-reports/*/; do
            if [ -f "$report_dir/test-results.json" ]; then
              # 解析测试结果 (简化版本)
              echo "- $(basename $report_dir): ✅ 测试完成" >> $GITHUB_STEP_SUMMARY
            else
              echo "- $(basename $report_dir): ❌ 测试失败或未完成" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "### 迭代验收状态" >> $GITHUB_STEP_SUMMARY
          echo "- 迭代 1: 基础架构测试 - ${{ needs.test.result == 'success' && '✅ 通过' || '❌ 失败' }}" >> $GITHUB_STEP_SUMMARY

      - name: 发送通知 (可选)
        if: failure()
        run: |
          echo "测试失败，需要检查以下内容："
          echo "1. 检查测试日志和截图"
          echo "2. 验证测试环境状态"
          echo "3. 检查代码变更影响"

      - name: 启用调试模式
        if: failure()
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true

# 环境变量配置
env:
  # 防止 Playwright 收集遥测数据
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: false
  # 设置测试并发度
  PLAYWRIGHT_WORKERS: 1
  # CI 环境标识
  CI: true
